{"version":3,"sources":["../../src/data_processor.js"],"names":["kbn","_","moment","TimeSeries","colors","DataProcessor","panel","options","dataList","length","firstItem","autoDetectMode","getAutoDetectXAxisMode","xaxis","mode","setPanelDefaultsForNewXAxisMode","map","item","index","timeSeriesHandler","customHandler","type","bars","lines","points","legend","show","tooltip","shared","values","stack","seriesData","datapoints","alias","target","colorIndex","color","aliasColors","series","unit","last","from","range","isOutsideRange","dataItem","nameField","name","message","validOptions","getXAxisValueOptions","found","find","value","onlyNumbers","fields","fieldParts","getPropertiesRecursive","obj","forEach","key","isObject","push","isNumber","field","concat","join","pop","text","property","propertyParts","split","i","undefined"],"mappings":"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","file":"data_processor.js","sourcesContent":["///<reference path=\"../../../headers/common.d.ts\" />\n\nimport kbn from 'app/core/utils/kbn';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport TimeSeries from 'app/core/time_series2';\nimport {colors} from 'app/core/core';\n\nexport class DataProcessor {\n\n  constructor(panel) {\n  }\n\n  getSeriesList(options) {\n    if (!options.dataList || options.dataList.length === 0) {\n      return [];\n    }\n\n    // auto detect xaxis mode\n    var firstItem;\n    if (options.dataList && options.dataList.length > 0) {\n      firstItem = options.dataList[0];\n      let autoDetectMode = this.getAutoDetectXAxisMode(firstItem);\n      if (this.panel.xaxis.mode !== autoDetectMode) {\n        this.panel.xaxis.mode = autoDetectMode;\n        this.setPanelDefaultsForNewXAxisMode();\n      }\n    }\n\n    switch (this.panel.xaxis.mode) {\n      case 'series':\n      case 'histogram':\n      case 'time': {\n        return options.dataList.map((item, index) => {\n          return this.timeSeriesHandler(item, index, options);\n        });\n      }\n      case 'field': {\n        return this.customHandler(firstItem);\n      }\n    }\n  }\n\n  getAutoDetectXAxisMode(firstItem) {\n    switch (firstItem.type) {\n      case 'docs': return 'field';\n      case 'table': return 'field';\n      default: {\n        if (this.panel.xaxis.mode === 'series') {\n          return 'series';\n        }\n        if (this.panel.xaxis.mode === 'histogram') {\n          return 'histogram';\n        }\n        return 'time';\n      }\n    }\n  }\n\n  setPanelDefaultsForNewXAxisMode() {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        this.panel.bars = false;\n        this.panel.lines = true;\n        this.panel.points = false;\n        this.panel.legend.show = true;\n        this.panel.tooltip.shared = true;\n        this.panel.xaxis.values = [];\n        break;\n      }\n      case 'series': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        this.panel.xaxis.values = ['total'];\n        break;\n      }\n      case 'histogram': {\n        this.panel.bars = true;\n        this.panel.lines = false;\n        this.panel.points = false;\n        this.panel.stack = false;\n        this.panel.legend.show = false;\n        this.panel.tooltip.shared = false;\n        break;\n      }\n    }\n  }\n\n  timeSeriesHandler(seriesData, index, options) {\n    var datapoints = seriesData.datapoints || [];\n    var alias = seriesData.target;\n\n    var colorIndex = index % colors.length;\n    var color = this.panel.aliasColors[alias] || colors[colorIndex];\n\n    var series = new TimeSeries({datapoints: datapoints, alias: alias, color: color, unit: seriesData.unit});\n\n    if (datapoints && datapoints.length > 0) {\n      var last = datapoints[datapoints.length - 1][1];\n      var from = options.range.from;\n      if (last - from < -10000) {\n        series.isOutsideRange = true;\n      }\n    }\n\n    return series;\n  }\n\n  customHandler(dataItem) {\n    let nameField = this.panel.xaxis.name;\n    if (!nameField) {\n      throw {message: 'No field name specified to use for x-axis, check your axes settings'};\n    }\n    return [];\n  }\n\n  validateXAxisSeriesValue() {\n    switch (this.panel.xaxis.mode) {\n      case 'series': {\n        if (this.panel.xaxis.values.length === 0) {\n          this.panel.xaxis.values = ['total'];\n          return;\n        }\n\n        var validOptions = this.getXAxisValueOptions({});\n        var found = _.find(validOptions, {value: this.panel.xaxis.values[0]});\n        if (!found) {\n          this.panel.xaxis.values = ['total'];\n        }\n        return;\n      }\n    }\n  }\n\n  getDataFieldNames(dataList, onlyNumbers) {\n    if (dataList.length === 0) {\n      return [];\n    }\n\n    let fields = [];\n    var firstItem = dataList[0];\n    let fieldParts = [];\n    function getPropertiesRecursive(obj) {\n        _.forEach(obj, (value, key) => {\n          if (_.isObject(value)) {\n            fieldParts.push(key);\n            getPropertiesRecursive(value);\n          } else {\n            if (!onlyNumbers || _.isNumber(value)) {\n              let field = fieldParts.concat(key).join('.');\n              fields.push(field);\n            }\n          }\n        });\n        fieldParts.pop();\n    }\n    if (firstItem.type === 'docs'){\n      if (firstItem.datapoints.length === 0) {\n        return [];\n      }\n      getPropertiesRecursive(firstItem.datapoints[0]);\n      return fields;\n    }\n  }\n\n  getXAxisValueOptions(options) {\n    switch (this.panel.xaxis.mode) {\n      case 'time': {\n        return [];\n      }\n      case 'series': {\n        return [\n          {text: 'Avg', value: 'avg'},\n          {text: 'Min', value: 'min'},\n          {text: 'Max', value: 'max'},\n          {text: 'Total', value: 'total'},\n          {text: 'Count', value: 'count'},\n        ];\n      }\n    }\n  }\n\n  pluckDeep(obj, property) {\n    let propertyParts = property.split('.');\n    let value = obj;\n    for (let i = 0; i < propertyParts.length; ++i) {\n      if (value[propertyParts[i]]) {\n        value = value[propertyParts[i]];\n      } else {\n        return undefined;\n      }\n    }\n    return value;\n  }\n\n}\n\n\n"]}